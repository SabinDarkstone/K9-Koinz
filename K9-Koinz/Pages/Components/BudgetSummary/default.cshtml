@using K9_Koinz.Utils
@model K9_Koinz.ViewComponents.BudgetSummary

<div class="row justify-content-center">
    <div class="m-2 col-md-7 col-lg-5 col-xl-4 col-10">
        <div class="@Model.AlertClasses">
            <div class="row justify-content-between">
                <div class="col-8">
                    <h4 class="alert-heading">At a Glance</h4>
                </div>
                <div class="col-4">
                    <div class="form-check form-switch">
                        <form method="get" name="form1">
                            <input type="hidden" asp-for="BudgetPeriod" value="@Model.RefDateValue"/>
                            @Html.EditorFor(x => x.UseCurrentExpenses, new { htmlAttributes = new { @class = "form-check-input", onclick = "document.form1.submit()" } })
                            @if (Model.UseCurrentExpenses) {
                                <text>Current</text>
                            } else {
                                <text>Budgeted</text>
                            }
                        </form>
                    </div>
                </div>
            </div>
            <div class="p-2">
                <div class="row justify-content-between">
                    <div class="col-7">
                        @Html.DisplayNameFor(model => Model.BudgetedIncome)
                    </div>
                    <div class="col-5" style="text-align:right">
                        @Model.BudgetedIncome.FormatCurrency(0)
                    </div>
                </div>

                @if (Math.Abs(Model.ExtraIncome) > 0) {
                    <div class="row justify-content-between">
                        <div class="col-7">
                            @Html.DisplayNameFor(model => Model.ExtraIncome)
                        </div>
                        <div class="col-5" style="text-align:right">
                            @Model.ExtraIncome.FormatCurrency(0)
                        </div>
                    </div>
                }

                @if (Model.TotalRollover > 0d) {
                    <div class="row justify-content-between">
                        <div class="col-7">
                            @Html.DisplayNameFor(model => Model.TotalRollover)
                        </div>
                        <div class="col-5" style="text-align:right">
                            @Model.TotalRollover.FormatCurrency(0)
                        </div>
                    </div>
                }

                <hr class="mt-1 mb-1" />

                <div class="row">
                    @if (Model.UseCurrentExpenses) {
                        <div class="col-7">
                            @Html.DisplayNameFor(model => Model.CurrentExpensesTotal)
                        </div>
                        <div class="col-5" style="text-align:right">
                            @Model.CurrentExpensesTotal.FormatCurrency(0)
                        </div>
                    } else {
                        <div class="col-7">
                            @Html.DisplayNameFor(model => Model.AllocatedExpenseTotal)
                        </div>
                        <div class="col-5" style="text-align:right">
                            @Model.AllocatedExpenseTotal.FormatCurrency(0)
                        </div>
                    }
                </div>

                @if (Math.Abs(Model.ExtraExpenseTotal) > 0) {
                    <div class="row">
                        <div class="col-7">
                            @Html.DisplayNameFor(model => Model.ExtraExpenseTotal)
                        </div>
                        <div class="col-5" style="text-align:right">
                            @Model.ExtraExpenseTotal.FormatCurrency(0)
                        </div>
                    </div>
                }

                @if (Math.Abs(Model.SavingsGoalTransferTotal) > 0) {
                    <div class="row">
                        <div class="col-7">
                            <a class="no-underline" id="savingsDetailsLink" href="javascript:$('#transactionListSavings').modal('show');" style="cursor: pointer">
                                @Html.DisplayNameFor(model => Model.SavingsGoalTransferTotal)
                            </a>
                            <i class="fa-solid fa-magnifying-glass-dollar"></i>
                        </div>
                        <div class="col-5" style="text-align:right">
                            @Model.SavingsGoalTransferTotal.FormatCurrency(0)
                        </div>
                    </div>
                }

                @if (Math.Abs(Model.BillsTotal) > 0) {
                    <div class="row">
                        <div class="col-7">
                            <a class="no-underline" id="billDetailsLink" href="javascript:$('#transactionListBills').modal('show');" style="cursor: pointer">
                                @Html.DisplayNameFor(model => Model.BillsTotal)
                            </a>
                            <i class="fa-solid fa-magnifying-glass-dollar"></i>
                        </div>
                        <div class="col-5" style="text-align:right">
                            @Model.BillsTotal.FormatCurrency(0)
                        </div>
                    </div>
                }

                <hr class="mt-1 mb-1" />

                <div class="row">
                    <div class="col-7">
                        @Html.DisplayNameFor(model => Model.NetAmount)
                    </div>
                    <div class="col-5" style="text-align:right">
                        @Model.NetAmount.FormatCurrency(0)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Component.InvokeAsync(nameof(TransactionListModal), new {
        relatedObjectType = "Bills",
        startDate = Model.StartDate,
        endDate = Model.EndDate,
        timespan = Model.Timespan
    })

@await Component.InvokeAsync(nameof(TransactionListModal), new {
        relatedObjectType = "Savings",
        startDate = Model.StartDate,
        endDate = Model.EndDate,
        timespan = Model.Timespan
    })