@page
@using System.Text.Json
@using K9_Koinz.Models.Helpers
@model K9_Koinz.Pages.Transactions.DetailsModel

@{
    ViewData["Title"] = "Transaction Details";

    var payloadString = Request.Cookies["backToTransactions"];
    var payload = new TransactionNavPayload();
    if (!string.IsNullOrEmpty(payloadString)) {
        payload = JsonSerializer.Deserialize<TransactionNavPayload>(payloadString);
    }
}

<h1>Details</h1>

<div>
    @if (Model.Record.ParentTransactionId.HasValue) {
        <h4>Child Transaction</h4>
    } else {
        <h4>Transaction</h4>
    }
    <hr />
    <dl class="row">
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Record.Account)
        </dt>
        <dd class="col-sm-9">
            <a asp-page="@PagePaths.AccountDetails" asp-route-id="@Model.Record.AccountId" class="link-unstyled">
                @Html.DisplayFor(model => model.Record.AccountName)
            </a>
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Record.Date)
        </dt>
        <dd class="col-sm-9">
            @Html.DisplayFor(model => model.Record.Date)
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Record.MerchantId)
        </dt>
        <dd class="col-sm-9">
            <a asp-page="@PagePaths.MerchantDetails" asp-route-id="@Model.Record.MerchantId" class="link-unstyled">
                @Html.DisplayFor(model => model.Record.MerchantName)
            </a>
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Record.Category)
        </dt>
        <dd class="col-sm-9">
            <a asp-page="@PagePaths.CategoryDetails" asp-route-id="@Model.Record.CategoryId" class="link-unstyled">
                @Html.DisplayFor(model => model.Record.CategoryName)
            </a>
        </dd>
        @if (Model.Record.TagId.HasValue) {
            var style = "background-color: " + Model.Record.Tag.HexColor + "; text-decoration: none";

            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Record.TagId)
            </dt>
            <dd class="col-sm-9">
                <span class="badge badge-pill" style="@style">@Model.Record.Tag.ShortForm</span>
            </dd>
        }
        @if (Model.Record.BillId.HasValue) {
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Record.BillId)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Record.Bill.Name)
                <a asp-page="@PagePaths.BillDetails" asp-route-id="@Model.Record.BillId"><i class="fa-solid fa-circle-info"></i></a>
            </dd>
        }
        @if (Model.Record.SavingsGoalId.HasValue) {
            var destPage = "";
            if (Model.Record.SavingsGoal.SavingsType == SavingsType.GOAL) {
                destPage = PagePaths.SavingsGoalDetails;
            } else if (Model.Record.SavingsGoal.SavingsType == SavingsType.BUCKET) {
                destPage = PagePaths.SavingsBucketDetails;
            }  
            <dt class="col-sm-3">
                @Html.DisplayNameFor(model => model.Record.SavingsGoalId)
            </dt>
            <dd class="col-sm-9">
                @Html.DisplayFor(model => model.Record.SavingsGoalName)
                <a asp-page="@destPage" asp-route-id="@Model.Record.SavingsGoalId"><i class="fa-solid fa-circle-info"></i></a>
            </dd>
        }
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Record.Amount)
        </dt>
        <dd class="col-sm-9">
            @Model.Record.Amount.FormatCurrency(2)
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Record.Notes)
        </dt>
        <dd class="col-sm-9">
            @if (string.IsNullOrEmpty(Model.Record.Notes)) {
                <text>&nbsp;</text>
            } else {
                @Html.DisplayFor(model => model.Record.Notes)
            }
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Record.IsSavingsSpending)
        </dt>
        <dd class="col-sm-3">
            @(Model.Record.IsSavingsSpending ? "Yes" : "No")
        </dd>

        @await Component.InvokeAsync(nameof(Components.DateFields), new {
            record = Model.Record
        })
    </dl>
</div>

@if (Model.Record.SplitTransactions.Any()) {
    <h4>Split Transactions</h4>
    <table class="table">
        <thead>
            <tr>
                @if (Model.Record.Category.CategoryType == CategoryType.TRANSFER) {
                    <th>Savings Goal</th>
                } else {
                    <th>@Html.DisplayNameFor(model => Model.Record.MerchantId)</th>
                    <th>@Html.DisplayNameFor(model => Model.Record.CategoryId)</th>
                }
                <th>@Html.DisplayNameFor(model => Model.Record.Amount)</th>
                <th>@Html.DisplayNameFor(model => Model.Record.Notes)</th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            @foreach (var split in Model.Record.SplitTransactions) {
                <tr>
                    <td>
                        @if (split.TagId.HasValue) {
                            var style = "background-color: " + split.Tag.HexColor + "; text-decoration: none";
                            <span class="badge badge-pill" style="@style">@split.Tag.ShortForm</span>
                        }
                        @if (Model.Record.Category.CategoryType == CategoryType.TRANSFER) {
                            @Html.DisplayFor(model => split.SavingsGoalName)
                        } else {
                            @Html.DisplayFor(model => split.MerchantName)
                        }
                    </td>

                    @if (Model.Record.Category.CategoryType != CategoryType.TRANSFER) {
                        <td>
                            @Html.DisplayFor(model => split.CategoryName)
                        </td>
                    }

                    <td>@split.Amount.FormatCurrency(2)</td>
                    <td>@Html.DisplayFor(model => split.Notes)</td>
                    <td>
                        <a asp-page="@PagePaths.TransactionEditSplit" asp-route-id="@split.Id"><i class="fa-solid fa-pencil"></i></a>
                        <a asp-page="@PagePaths.TransactionDetails" asp-route-id="@split.Id"><i class="fa-solid fa-circle-info"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<div>
    @if (Model.Record.TransferId.HasValue) {
        @if (Model.Record.Transfer.RepeatConfigId.HasValue) {
            <a class="btn btn-secondary mb-2" asp-page="@PagePaths.RecurringTransferDetails" asp-route-id="@Model.Record.Transfer.RecurringTransferId">
                View Recurring Transfer
            </a>
        }

        @if (Model.Record.TransferId.HasValue) {
            <a class="btn btn-secondary mb-2" asp-page="@PagePaths.TransferDetails" asp-route-id="@Model.Record.TransferId">
                View Transfer
            </a>
        }
    }

    @if (!Model.Record.ParentTransactionId.HasValue) {
        <a asp-page="@PagePaths.TransactionEdit" asp-route-id="@Model.Record.Id" class="btn btn-primary mb-2">
            <i class="fa-solid fa-pen-to-square"></i> Edit
        </a>
        if (Model.Record.Category.CategoryType != Models.CategoryType.TRANSFER) {
            <a class="btn btn-secondary mb-2" asp-page="@PagePaths.TransactionSplit" asp-route-parentId="@Model.Record.Id">
                <i class="fa-solid fa-arrows-split-up-and-left"></i>
                @if (Model.Record.SplitTransactions.Any()) {
                    <text>Edit Split</text>
                } else {
                    <text>Split Transaction</text>
                }
            </a>
            @if (Model.Record.IsSplit) {
                <a class="btn btn-outline-secondary mb-2" asp-page="@PagePaths.TransactionRemoveSplit" asp-route-parentId="@Model.Record.Id">
                    Remove Split
                </a>
            }
        }
        <a asp-page="@PagePaths.TransactionDelete" asp-route-id="@Model.Record.Id" class="btn btn-danger mb-2">
            <i class="fa-solid fa-trash"></i> Delete
        </a>
    } else {
        <a asp-page="@PagePaths.TransactionEditSplit" asp-route-id="@Model.Record.Id" class="btn btn-primary mb-2">
            <i class="fa-solid fa-pen-to-square"></i> Edit
        </a>
        <a asp-page="@PagePaths.TransactionDetails" asp-route-id="@Model.Record.ParentTransactionId" class="btn btn-primary mb-2">
            Go to Parent
        </a>
    }
</div>
<a asp-page="@PagePaths.TransactionIndex"
   asp-route-sortOrder="@payload.SortOrder"
   asp-route-catFilter="@payload.CatFilter"
   asp-route-pageIndex="@payload.PageIndex"
   asp-route-accountFilter="@payload.AccountFilter"
   asp-route-minDate="@payload.MinDate"
   asp-route-maxDate="@payload.MaxDate"
   asp-route-merchFilter="@payload.MerchFilter">
    Back to List
</a>