@page
@using Models
@model K9_Koinz.Pages.Bills.CreateModel

@{
    ViewData["Title"] = "Create New Bill";
}

<h1>Create</h1>

<h4>Bill</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @Html.FloatingFormInput(model => Model.Record.Name)
            <div class="form-group form-floating">
                <select asp-for="Record.AccountId" class="form-control" asp-items="@Model.AccountOptions">
                    <option value="" selected disabled>Select an Account...</option>
                </select>
                <label asp-for="Record.AccountId"></label>
            </div>
            @Html.FloatingFormAutocompleteInput(model => Model.Record.MerchantId, "Merchant")
            @Html.FloatingFormAutocompleteInput(model => Model.Record.CategoryId, "Category")
            @Html.FloatingFormInput(model => Model.Record.Amount, "number")
            @Html.FloatingFormInput(model => Model.Record.RepeatConfig.FirstFiring, "date")
            @Html.FloatingFormInput(model => Model.Record.RepeatConfig.TerminationDate, "date")
            @Html.FloatingFormEnumSelect(model => Model.Record.RepeatConfig.Mode, typeof(RepeatMode), placeholder: "Select a Mode...")
            @Html.FloatingFormEnumSelect(model => Model.Record.RepeatConfig.Frequency, typeof(RepeatFrequency), placeholder: "Select a Freqency...")
            @Html.FloatingFormInput(model => Model.Record.RepeatConfig.IntervalGap, "number", "grpIntervalGap")
            <div class="form-group">
                <div class="form-check form-switch">
                    @Html.EditorFor(x => x.Record.IsAutopay, new { htmlAttributes = new { @class = "form-check-input" } })
                    <label class="form-check-label" asp-for="Record.IsAutopay"></label>
                </div>
            </div>

            @Html.SubmitButton("Create", icon: "fa-floppy-disk")
        </form>
    </div>
</div>

@section Scripts {
    <script src="~/js/repeatConfigModeToggler.js"></script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
