@page
@using Models
@using K9_Koinz.Utils
@model K9_Koinz.Pages.Budgets.IndexModel

@{
    ViewData["Title"] = "My Budgets";
}

<style>
    .marker-list {
        list-style: none;
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
    }

        .marker-list .marker {
            position: absolute;
            width: 1px;
            height: 20px;
            background-color: black;
        }

    .list-group-item {
        padding-left: 0 !important;
        padding-right: 0 !important;
        margin-bottom: 0.25rem !important;
        margin-top: 0.25rem !important;
        border: none !important;
    }

    .list-group {
        margin-left: 1rem !important;
        margin-right: 1rem !important;
    }
</style>

<h1>Budgets</h1>


@if (!Model.Budgets.Any()) {
    <div>
        <p>You do not have any budgets created yet.  Click the button below to make one!</p>
        <a asp-page="./Create" class="btn btn-primary">New Budget</a>
    </div>
} else {
    <a asp-page="Create" class="no-underline-ever">
        <span class="btn btn-success btn-sm mb-3">
            <i class="fa-solid fa-plus"></i> Create New
        </span>
    </a>

    <!--
        BUDGET SELECTION BUTTONS
    -->
    <div>
        <ul class="nav nav-pills mb-2 row">
            @foreach (var budget in Model.Budgets) {
                var navClassList = "nav-link";
                if (budget.Id == Model.SelectedBudget.Id) {
                    navClassList += " active";
                }

                <li class="nav-item col-md">
                    <a style="text-align:center;" asp-page="./Index" asp-route-selectedBudget="@budget.Id" class="@navClassList">
                        @if (budget.BudgetTagId.HasValue) {
                            var style = "background-color: " + budget.BudgetTag.HexColor + "; text-decoration: none";
                            <span class="badge badge-primary" style="@style">@budget.BudgetTag.ShortForm</span>
                        }
                        @budget.Name
                    </a>
                </li>
            }
        </ul>
    </div>

    <!--
        BUDGET PERIOD SELECTION BUTTONS
    -->
    <div class="row mb-4 justify-content-center">
            @foreach (var period in Model.PeriodOptions) {
                var classList = "btn";
                if (period.IsSelected) {
                    classList += " btn-secondary";
                } else {
                    classList += " btn-outline-secondary";
                }

                if (period.IsDisabled) {
                    classList += " disabled";
                }
                <div class="col-3 col-sm-4 col-md-3 col-xl-1 mb-2" style="text-align:center">
                    <a class="@classList" style="width:100%" asp-page="./Index" asp-route-budgetPeriod="@period.ValueString" asp-route-selectedBudget="@Model.SelectedBudget.Id">
                        <span>@period.Text</span>
                    </a>
                </div>
            }
        </div>
}

@if (Model.SelectedBudget == null) {
    if (Model.Budgets.Any()) {
        <p class="text-danger">There has been an error displaying your selected budget.</p>
    }
} else {
    <h2>
        <a asp-page="./Details" asp-route-id="@Model.SelectedBudget.Id">@Model.SelectedBudget.Name</a>
    </h2>

    <p>@Model.SelectedBudget.Description</p>

    var incomeTotal = Model.SelectedBudget.IncomeLines.Sum(line => line.BudgetedAmount);
    var allocatedExpenseTotal = Model.SelectedBudget.ExpenseLines.Sum(line => line.BudgetedAmount);
    var extraExpenseTotal = Model.SelectedBudget.UnallocatedExpenses.SelectMany(line => line.Transactions).ToList().GetTotalSpent();

    var alertClass = "alert ";
    if ((incomeTotal - allocatedExpenseTotal - extraExpenseTotal) >= 0) {
        alertClass += "alert-success";
    } else {
        alertClass += "alert-danger";
    }

    @if (!Model.SelectedBudget.DoNotUseCategories) {
        <div class="row justify-content-center">
            <div class="m-2 col-md-5 col-lg-4 col-xl-3 col-8">
                <div class="@alertClass">
                    <h4 class="alert-heading">Overview</h4>
                    <div class="p-2">
                        <div class="row justify-content-between">
                            <div class="col-8">
                                Estimated Income
                            </div>
                            <div class="col-4" style="text-align:right">
                                @incomeTotal.FormatCurrency(0)
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-8">
                                Planned Expenses
                            </div>
                            <div class="col-4" style="text-align:right">
                                @((allocatedExpenseTotal * -1).FormatCurrency(0))
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-8">
                                Extra Expenses
                            </div>
                            <div class="col-4" style="text-align:right">
                                @((extraExpenseTotal * -1).FormatCurrency(0))
                            </div>
                        </div>
                        <hr />
                        <div class="row">
                            <div class="col-8">
                                Net Amount
                            </div>
                            <div class="col-4" style="text-align:right">
                                @((incomeTotal - allocatedExpenseTotal - extraExpenseTotal).FormatCurrency(0))
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <hr />

    if (Model.SelectedBudget.DoNotUseCategories) {
        var budgetLine = Model.SelectedBudget.BudgetLines.First();

        var todayLine = "left: " + budgetLine.TimePerent + "%;";
        var startDate = Model.SelectedBudget.Timespan.GetStartAndEndDate(Model.BudgetPeriod).Item1.FormatForUrl();
        var endDate = Model.SelectedBudget.Timespan.GetStartAndEndDate(Model.BudgetPeriod).Item2.FormatForUrl();

        var solidWidthString = "";
        var stripedWidthString = "";

        var totalBarPercent = 0d;

        var solidProgressBarClassList = "progress-bar";
        var stripedProgressBarClassList = "progress-bar progress-bar-striped";

        var spentOverBudgetedPercent = Math.Clamp((Math.Abs(budgetLine.SpentAmount) / budgetLine.BudgetedAmount) * 100, 0, 100);

        if (budgetLine.RolloverStatus == RolloverStatus.NONE) {
            solidWidthString = "width: " + spentOverBudgetedPercent + "%;";
            totalBarPercent = spentOverBudgetedPercent;
        } else if (budgetLine.RolloverStatus == RolloverStatus.POSITIVE) {
            var spentOverBudgetedPlusRolloverPercent = Math.Clamp((Math.Abs(budgetLine.SpentAmount) / (budgetLine.BudgetedAmount + budgetLine.RolloverAmount.Value)) * 100, 0, 100);
            var remainingPercent = spentOverBudgetedPercent - spentOverBudgetedPlusRolloverPercent;

            solidWidthString = "width: " + remainingPercent + "%;";
            stripedWidthString = "width: " + spentOverBudgetedPlusRolloverPercent + "%;";
            totalBarPercent = spentOverBudgetedPercent;
        } else {
            var overagePercent = Math.Clamp(Math.Abs(budgetLine.RolloverAmount.Value) / budgetLine.BudgetedAmount * 100, 0, 100);

            solidWidthString = "width: " + spentOverBudgetedPercent + "%;";
            stripedWidthString = "width: " + overagePercent + "%;";
            totalBarPercent = overagePercent + spentOverBudgetedPercent;
        }

        if (totalBarPercent >= 99.5 && !budgetLine.GreenBarAlways) {
            solidProgressBarClassList += " bg-danger";
            stripedProgressBarClassList += " bg-danger";
        } else if (totalBarPercent >= 80 && !budgetLine.GreenBarAlways) {
            solidProgressBarClassList += " bg-warning";
            stripedProgressBarClassList += " bg-warning";
        } else {
            solidProgressBarClassList += " bg-success";
            stripedProgressBarClassList += " bg-success";
        }

        <ul class="list-group">
            <li class="list-group-item">
                <div class="row">
                    <div class="col">
                        <p>
                            <button class="btn btn-outline-dark btn-sm" style="margin-bottom:-5px">
                                <a class="no-underline" asp-page="/Transactions/Index" asp-route-minDate="@startDate" asp-route-maxDate="@endDate" asp-route-tagId="@Model.SelectedBudget.BudgetTagId">@budgetLine.BudgetCategory.Name</a>
                            </button>
                        </p>
                    </div>
                    <div class="col">
                        <p style="text-align: right;">@budgetLine.Budget.TimespanString</p>
                    </div>
                </div>
                @if (budgetLine.RolloverStatus == RolloverStatus.NONE || budgetLine.RolloverStatus == RolloverStatus.NOT_READY) {
                    <div class="row">
                        <div class="col">
                            <div class="progress" style="height: 20px;">
                                <div class="@solidProgressBarClassList" role="progressbar" style="@solidWidthString">
                                    @if (Model.BudgetPeriod.Date == DateTime.Now.Date) {
                                        <ul class="marker-list">
                                            <li class="marker" style="@todayLine"></li>
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                } else {
                    <div class="row">
                        <div class="col">
                            <div class="progress" style="height: 20px;">
                                @if (budgetLine.RolloverStatus == RolloverStatus.POSITIVE) {
                                    <div class="@stripedProgressBarClassList" role="progressbar" style="@stripedWidthString">
                                        @if (Model.BudgetPeriod.Date == DateTime.Now.Date) {
                                            <ul class="marker-list">
                                                <li class="marker" style="@todayLine"></li>
                                            </ul>
                                        }
                                    </div>
                                    <div class="@solidProgressBarClassList" role="progressbar" style="@solidWidthString">
                                    </div>
                                } else if (budgetLine.RolloverStatus == RolloverStatus.NEGATIVE) {
                                    <div class="@solidProgressBarClassList" role="progressbar" style="@solidWidthString">
                                        @if (Model.BudgetPeriod.Date == DateTime.Now.Date) {
                                            <ul class="marker-list">
                                                <li class="marker" style="@todayLine"></li>
                                            </ul>
                                        }
                                    </div>
                                    <div class="@stripedProgressBarClassList" role="progressbar" style="@stripedWidthString">
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                <div class="row text-secondary">
                    <div class="col-8">
                        @budgetLine.SpentAmount.FormatCurrency(0)
                        <span style="font-weight:lighter;">
                            of
                        </span>
                        @budgetLine.BudgetedAmount.FormatCurrency(0)
                        @if (budgetLine.DoRollover && budgetLine.CurrentPeriod != null) {
                            <span style="font-weight:lighter;">
                                @if (budgetLine.RolloverStatus == RolloverStatus.NEGATIVE) {
                                    <text>
                                        (@Math.Abs(budgetLine.RolloverAmount.Value).FormatCurrency(0) Over)
                                    </text>
                                } else if (budgetLine.RolloverStatus == RolloverStatus.POSITIVE) {
                                    <text>
                                        (@budgetLine.RolloverAmount.Value.FormatCurrency(0) Extra)
                                    </text>
                                }
                            </span>
                        }
                    </div>
                    <div class="col-4" style="text-align: right; font-weight: lighter">
                        @if (!budgetLine.DoRollover || (budgetLine.DoRollover && budgetLine.PreviousPeriod == null)) {
                            @if (budgetLine.BudgetedAmount >= budgetLine.SpentAmount) {
                                <text>
                                    @((budgetLine.BudgetedAmount - @budgetLine.SpentAmount).FormatCurrency(0)) Left
                                </text>
                            } else {
                                <text>
                                    @((budgetLine.SpentAmount - @budgetLine.BudgetedAmount).FormatCurrency(0)) Over
                                </text>
                            }
                        } else if (budgetLine.DoRollover && budgetLine.CurrentPeriod != null && budgetLine.PreviousPeriod != null) {
                            var spentAmountWithRollover = (budgetLine.BudgetedAmount + budgetLine.CurrentPeriod.StartingAmount) - budgetLine.SpentAmount;
                            if (spentAmountWithRollover < 0) {
                                <text>
                                    @Math.Abs(spentAmountWithRollover).FormatCurrency(0) Over
                                </text>
                            } else if (spentAmountWithRollover >= 0) {
                                <text>
                                    @Math.Abs(spentAmountWithRollover).FormatCurrency(0) Left
                                </text>
                            }
                        }
                    </div>
                </div>
            </li>
        </ul>
    } else {

        @if (Model.SelectedBudget.IncomeLines.Any()) {
            <div class="row">
                <div class="col">
                    <h4>Income</h4>
                </div>
                <div class="col">
                    <h4 style="text-align: right;">
                        @Model.SelectedBudget.IncomeLines.Sum(line => line.SpentAmount).FormatCurrency(0) of @Model.SelectedBudget.IncomeLines.Sum(line => line.BudgetedAmount).FormatCurrency(0)
                    </h4>
                </div>
            </div>
            <ul class="list-group mb-4">
                @foreach (var budgetLine in Model.SelectedBudget.IncomeLines) {
                    var spentOverBudgetedPercent = Math.Clamp((budgetLine.SpentAmount / budgetLine.BudgetedAmount) * 100, 0, 100);

                    var width = "width: " + spentOverBudgetedPercent + "%;";
                    var todayLine = "left: " + budgetLine.TimePerent + "%;";

                    <li class="list-group-item">
                        <div class="row">
                            <div class="col">
                                <p>@budgetLine.BudgetCategory.Name</p>
                            </div>
                            <div class="col">
                                <p style="text-align: right;">@budgetLine.Budget.TimespanString</p>
                            </div>
                        </div>

                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar" role="progressbar" style="@width">
                                <ul class="marker-list">
                                    <li class="marker" style="@todayLine"></li>
                                </ul>
                            </div>

                        </div>
                        <div class="text-secondary">
                            @budgetLine.SpentAmount.FormatCurrency(0)
                            <span style="font-weight:lighter;">
                                of
                            </span>
                            @budgetLine.BudgetedAmount.FormatCurrency(0)
                        </div>
                    </li>
                }
            </ul>

            @if (Model.SelectedBudget.UnallocatedLines.Any()) {
                <div class="row">
                    <div class="col">
                        <h4>Other Income</h4>
                    </div>
                    <div class="col">
                        <h4 style="text-align: right;">
                            @((Model.SelectedBudget.UnallocatedIncomes.Sum(line => line.SpentAmount)).FormatCurrency(0))
                        </h4>
                    </div>
                </div>
                <ul>
                    @foreach (var budgetLine in Model.SelectedBudget.UnallocatedIncomes) {
                        var startDate = Model.SelectedBudget.Timespan.GetStartAndEndDate().Item1.FormatForUrl();
                        var endDate = Model.SelectedBudget.Timespan.GetStartAndEndDate().Item2.FormatForUrl();

                        <li>
                            <a style="color:black;" asp-page="/Transactions/Index" asp-route-minDate="@startDate" asp-route-maxDate="@endDate" asp-route-catFilter="@budgetLine.BudgetCategoryId">@budgetLine.BudgetCategory.FullyQualifiedName</a> @budgetLine.SpentAmount.FormatCurrency()
                        </li>
                    }
                </ul>
            }

        }

        <div class="row">
            <div class="col">
                <h4>Expenses</h4>
            </div>
            <div class="col">
                <h4 style="text-align: right;">
                    @Model.SelectedBudget.ExpenseLines.Sum(line => line.SpentAmount).FormatCurrency(0) of @Model.SelectedBudget.ExpenseLines.Sum(line => line.BudgetedAmount).FormatCurrency(0)
                </h4>
            </div>
        </div>

        <ul class="list-group mb-4">
            @foreach (var budgetLine in Model.SelectedBudget.ExpenseLines) {
                var todayLine = "left: " + budgetLine.TimePerent + "%;";
                var startDate = Model.SelectedBudget.Timespan.GetStartAndEndDate(Model.BudgetPeriod).Item1.FormatForUrl();
                var endDate = Model.SelectedBudget.Timespan.GetStartAndEndDate(Model.BudgetPeriod).Item2.FormatForUrl();

                var solidWidthString = "";
                var stripedWidthString = "";

                var totalBarPercent = 0d;

                var solidProgressBarClassList = "progress-bar";
                var stripedProgressBarClassList = "progress-bar progress-bar-striped";

                var spentOverBudgetedPercent = Math.Clamp((Math.Abs(budgetLine.SpentAmount) / budgetLine.BudgetedAmount) * 100, 0, 100);

                if (budgetLine.RolloverStatus == RolloverStatus.NONE) {
                    solidWidthString = "width: " + spentOverBudgetedPercent + "%;";
                    totalBarPercent = spentOverBudgetedPercent;
                } else if (budgetLine.RolloverStatus == RolloverStatus.POSITIVE) {
                    var spentOverBudgetedPlusRolloverPercent = Math.Clamp((Math.Abs(budgetLine.SpentAmount) / (budgetLine.BudgetedAmount + budgetLine.RolloverAmount.Value)) * 100, 0, 100);
                    var remainingPercent = spentOverBudgetedPercent - spentOverBudgetedPlusRolloverPercent;

                    solidWidthString = "width: " + remainingPercent + "%;";
                    stripedWidthString = "width: " + spentOverBudgetedPlusRolloverPercent + "%;";
                    totalBarPercent = spentOverBudgetedPercent;
                } else {
                    var overagePercent = Math.Clamp(Math.Abs(budgetLine.RolloverAmount.Value) / budgetLine.BudgetedAmount * 100, 0, 100);

                    solidWidthString = "width: " + spentOverBudgetedPercent + "%;";
                    stripedWidthString = "width: " + overagePercent + "%;";
                    totalBarPercent = overagePercent + spentOverBudgetedPercent;
                }

                if (totalBarPercent >= 99.5 && !budgetLine.GreenBarAlways) {
                    solidProgressBarClassList += " bg-danger";
                    stripedProgressBarClassList += " bg-danger";
                } else if (totalBarPercent >= 80 && !budgetLine.GreenBarAlways) {
                    solidProgressBarClassList += " bg-warning";
                    stripedProgressBarClassList += " bg-warning";
                } else {
                    solidProgressBarClassList += " bg-success";
                    stripedProgressBarClassList += " bg-success";
                }

                <li class="list-group-item">
                    <div class="row">
                        <div class="col">
                            <p>
                                <button class="btn btn-outline-dark btn-sm" style="margin-bottom:-5px">
                                    <a class="no-underline" asp-page="/Transactions/Index" asp-route-minDate="@startDate" asp-route-maxDate="@endDate" asp-route-catFilter="@budgetLine.BudgetCategoryId">@budgetLine.BudgetCategory.Name</a>
                                </button>
                            </p>
                        </div>
                        <div class="col">
                            <p style="text-align: right;">@budgetLine.Budget.TimespanString</p>
                        </div>
                    </div>
                    @if (budgetLine.RolloverStatus == RolloverStatus.NONE || budgetLine.RolloverStatus == RolloverStatus.NOT_READY) {
                        <div class="row">
                            <div class="col">
                                <div class="progress" style="height: 20px;">
                                    <div class="@solidProgressBarClassList" role="progressbar" style="@solidWidthString">
                                        @if (Model.BudgetPeriod.Date == DateTime.Now.Date) {
                                            <ul class="marker-list">
                                                <li class="marker" style="@todayLine"></li>
                                            </ul>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    } else {
                        <div class="row">
                            <div class="col">
                                <div class="progress" style="height: 20px;">
                                    @if (budgetLine.RolloverStatus == RolloverStatus.POSITIVE) {
                                        <div class="@stripedProgressBarClassList" role="progressbar" style="@stripedWidthString">
                                            @if (Model.BudgetPeriod.Date == DateTime.Now.Date) {
                                                <ul class="marker-list">
                                                    <li class="marker" style="@todayLine"></li>
                                                </ul>
                                            }
                                        </div>
                                        <div class="@solidProgressBarClassList" role="progressbar" style="@solidWidthString">
                                        </div>
                                    } else if (budgetLine.RolloverStatus == RolloverStatus.NEGATIVE) {
                                        <div class="@solidProgressBarClassList" role="progressbar" style="@solidWidthString">
                                            @if (Model.BudgetPeriod.Date == DateTime.Now.Date) {
                                                <ul class="marker-list">
                                                    <li class="marker" style="@todayLine"></li>
                                                </ul>
                                            }
                                        </div>
                                        <div class="@stripedProgressBarClassList" role="progressbar" style="@stripedWidthString">
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                    <div class="row text-secondary">
                        <div class="col-8">
                            @budgetLine.SpentAmount.FormatCurrency(0)
                            <span style="font-weight:lighter;">
                                of
                            </span>
                            @budgetLine.BudgetedAmount.FormatCurrency(0)
                            @if (budgetLine.DoRollover && budgetLine.CurrentPeriod != null) {
                                <span style="font-weight:lighter;">
                                    @if (budgetLine.RolloverStatus == RolloverStatus.NEGATIVE) {
                                        <text>
                                            (@Math.Abs(budgetLine.RolloverAmount.Value).FormatCurrency(0) Over)
                                        </text>
                                    } else if (budgetLine.RolloverStatus == RolloverStatus.POSITIVE) {
                                        <text>
                                            (@budgetLine.RolloverAmount.Value.FormatCurrency(0) Extra)
                                        </text>
                                    }
                                </span>
                            }
                        </div>
                        <div class="col-4" style="text-align: right; font-weight: lighter">
                            @if (!budgetLine.DoRollover || (budgetLine.DoRollover && budgetLine.PreviousPeriod == null)) {
                                @if (budgetLine.BudgetedAmount >= budgetLine.SpentAmount) {
                                    <text>
                                        @((budgetLine.BudgetedAmount - @budgetLine.SpentAmount).FormatCurrency(0)) Left
                                    </text>
                                } else {
                                    <text>
                                        @((budgetLine.SpentAmount - @budgetLine.BudgetedAmount).FormatCurrency(0)) Over
                                    </text>
                                }
                            } else if (budgetLine.DoRollover && budgetLine.CurrentPeriod != null && budgetLine.PreviousPeriod != null) {
                                var spentAmountWithRollover = (budgetLine.BudgetedAmount + budgetLine.CurrentPeriod.StartingAmount) - budgetLine.SpentAmount;
                                if (spentAmountWithRollover < 0) {
                                    <text>
                                        @Math.Abs(spentAmountWithRollover).FormatCurrency(0) Over
                                    </text>
                                } else if (spentAmountWithRollover >= 0) {
                                    <text>
                                        @Math.Abs(spentAmountWithRollover).FormatCurrency(0) Left
                                    </text>
                                }
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>

        @if (Model.SelectedBudget.UnallocatedExpenses.Any()) {
            <div class="row">
                <div class="col">
                    <h4>Other Spending</h4>
                </div>
                <div class="col">
                    <h4 style="text-align: right;">
                        @((Model.SelectedBudget.UnallocatedExpenses.Sum(line => line.SpentAmount) * -1).FormatCurrency(0))
                    </h4>
                </div>
            </div>
            <ul>
                @foreach (var budgetLine in Model.SelectedBudget.UnallocatedExpenses) {
                    var startDate = Model.SelectedBudget.Timespan.GetStartAndEndDate(Model.BudgetPeriod).Item1.FormatForUrl();
                    var endDate = Model.SelectedBudget.Timespan.GetStartAndEndDate(Model.BudgetPeriod).Item2.FormatForUrl();

                    <li>
                        <a style="color:black;" asp-page="/Transactions/Index" asp-route-minDate="@startDate" asp-route-maxDate="@endDate" asp-route-catFilter="@budgetLine.BudgetCategoryId">@budgetLine.BudgetCategory.FullyQualifiedName</a> @budgetLine.SpentAmount.FormatCurrency()
                    </li>
                }
            </ul>
        }
    }
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}